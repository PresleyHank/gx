package rsa

import (
	"fmt"
	"reflect"
	"testing"
)

var (
	pri = `-----BEGIN private key-----
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
-----END private key-----`
	pub = `-----BEGIN public key-----
MIIEIjANBgkqhkiG9w0BAQEFAAOCBA8AMIIECgKCBAEAwYHnF+LabqVT3OQQXOUZ
sesHh50U4za0SQdq7x8Xl1/hney+8bWG9iCdL/sP86e2ltvYnDJpibHJlDGBO92g
rhABtZ2sPEPudcxucO+iB9lQO+peEqfvfBDHIJs0FMLVFoF3S+w7LqA+9lmkNvfc
gTiEE2v+ajzj+PD5wEjPnY/hotV3Wn6YhQrBdYuzPNVK6rliV8hQ0zZGlfPd4Wxp
lR0fffaLCWbY3+xUyzpRuCn4HSx/3Wcz782P8B6bLKA93SB9Iww5QMIFVQNyNAjr
XNKYLh4ZKjmTPkQYuo5j4/IakOtontQE0F4UNWpUhnSyiU0vOLsdBDTx1mE5bQaK
190hnB3GqHjv4hSRSi13+6zdgxg9UQ+/U+aheu1A0Y+cQfaXYVqTL6H66Rdupldf
DFHUX5WrRLZGZ868DomsU6LNVwsqtBtoA9gimwJbSAUgbpUc/LtZ9H7tuytMwGfj
/NsTeFWSOV0TzcXKiusYAfLZqWcZFI1DbIURhSzObO1KxkFYwaDSYckJi41rf213
HDfrlq2P/7h7au3r8x+SJ7Eso5zxDtkivSaXRrL26sRvFn7Kw+8d5w4e4FZm2vHI
26e/yiWBBT7lIRgyBDpiWCQvZnenHLOUvIZ/pgk9LUSnILhkXviQxu1QFGgPdab4
/Zh62i1vfOYhCjuGH0P7C2m8mYuJq81f9l6T3suzTN1U6IffZjStWuGM8sC0CWTn
t9722chVt2ZQ6/LOFFWGCcHd1PmIyqe2YK4E+/x6ZABRFRgb9/dYU0uQkfpx2DTu
AcXozYx3cP4fbbupobB3PKalLof/Umy212OQzHMrAoPd7883PmnEMrC0XS1VkVMb
KEeIFJbw8OD6fFlivSUISgF6LggHEJ9ayTc88+KkOvF2eGejpUZdoR9i1k77dUSU
j//WFhLa+Y7C7sTA9rO0FqYBn8xz4qozdMGxxC0LyptQ3PtqYBWNMMCHyrcCUGUL
MF1xshuP8eCUOYAAkAip2wd6Jm875SI/rW6OU2WvezqCD4qjs8VJAu64gbX19/ee
LLqAPfGpvbUGQEURFRp9yzyiyPnZx89kykK7H+XDE2LC64AdvWsMsaMBcTR0/6iP
YIOOAUoVDHq2//SfPPUde9elsJuazpp4eB5HlG3w5cUtU2jmg/GoscDRctMVX2pS
Jp4Jp4EItibSoDlkRE9ZyEVN56hha9C293GOHwM4ABaGEtlFPgtTo/JTLjeBdMKr
YoPHLKeA7EvzYjsdlpLlpnGNndx4KqntC2leCPz1e6eDL/i0KehOf/bkuHhLaaYl
M3VfiQLE0F/y/28MoqeLW+YehWsKYCnIOPqnSrHhjQ0YVGH/B1R57/wXCVwLVlGX
RQIDAQAB
-----END public key-----`

//	pri = `-----BEGIN private key-----
//MCQCAQACAwDekQIDAQABAgMAxSkCAgD7AgIA4wICAN8CAUsCAXM=
//-----END private key-----`
//	pub = `-----BEGIN public key-----
//MB4wDQYJKoZIhvcNAQEBBQADDQAwCgIDAN6RAgMBAAE=
//-----END public key-----`
)

func TestRsa(t *testing.T) {
	//fmt.Println(GenRsaKeys(16))
	epri := EncodeString(pri)
	epub := EncodeString(pub)
	c := MustNewClient(Decode(epub))
	s := MustNewServer(Decode(epri))
	txt := []string{"a", "hello", "ally", pri, pub}
	for i, v := range txt {
		ev := EncodeString(v)
		dv := DecodeString(ev)
		fmt.Println(i, v)
		fmt.Println(i, ev)
		if dv != v {
			panic("error")
		}
		sign, _ := s.SignDefault([]byte(v))
		ssign := BytesToHexString(sign)
		dsign := HexStringToBytes(ssign)
		sdsign := BytesToHexString(dsign)
		fmt.Println(reflect.DeepEqual(sign, dsign), sdsign)
		fmt.Println(i, "sign", fmt.Sprintf("%x", sign), c.VerifyDefault([]byte(v), sign))
	}
	fmt.Println(Encode(key))
}
